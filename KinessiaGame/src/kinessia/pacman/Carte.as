/** * Tutoriel "Les jeux à base de tuiles * "http://ressources.mediabox.fr/tutoriaux/flashplatform/jeux/jeux_a_base_de_tuiles" *  * Classe "Carte" * */package kinessia.pacman {	import flash.display.Sprite; 	public class Carte extends Sprite	{		/**		 * Longueur et largeur de la carte (en tuiles).		 */		private var _mapWidth:int;		private var _mapHeight:int;				/**		 * Hauteur et largeur des objets.		 */		private var _hauteurObjets:Number;		private var _largeurObjets:Number; 		/**		 * Tableaux 2D pour référencer les objets de la carte.		 */		private var _sols:Vector.<Vector.<Objet>>;		private var _objets:Vector.<Vector.<Objet>>;		private var _joueurs:Vector.<Objet>;				/**		 * Sprites utilisés pour séparer les sols, murs, objets et joueurs		 * Pour éviter les problèmes de profondeur.		 */		private var _solsSprite:Sprite;		private var _objetsSprite:Sprite;		private var _joueursSprite:Sprite; 		/**		 *  Constructor		 * 		 *	@param $width Longueur de la carte (en nombre de tuiles).		 *	@param $height Largeur de la carte (en nombre de tuiles).		 * 	@param $largeurObjets Valeur facultative indiquant la hauteur d'une tuile.		 * 	@param $hauteurObjets Valeur facultative indiquant la largeur d'une tuile.		 */ 		public function Carte ( $width:int, $height:int, $largeurObjets:Number=0, $hauteuObjets:Number=0 )		{			/**			 * Initialisation des propriétés.			 */			_mapWidth = $width;			_mapHeight = $height;			_largeurObjets = $largeurObjets;			_hauteurObjets = $hauteuObjets;						/**			 * Création des sprites.			 */			_solsSprite = new Sprite ();			_objetsSprite = new Sprite ();			_joueursSprite = new Sprite (); 						/**			 * Instantiation des Vectors.			 * Chaque ligne à une longueur égale à _mapWidth.			 */			_sols = new Vector.<Vector.<Objet>> ( _mapWidth );			_objets = new Vector.<Vector.<Objet>> ( _mapWidth );			_joueurs = new Vector.<Objet> ();						/**			 * Pour chaque ligne, on initialise chaque colonne à une longueur égale à _mapHeight.			 */			for ( var i:int = 0; i < _mapWidth; i++ )			{				_sols[i] = new Vector.<Objet> ( _mapHeight );				_objets[i] = new Vector.<Objet> ( _mapHeight );			}						/**			 * Ajout des sprites à la liste d'affichage.			 */			addChild ( _solsSprite );			addChild ( _objetsSprite );			addChild ( _joueursSprite );		} 		/**		*	Méthode pour ajouter un objet dans la carte.		* 		* 	@param $objet Objet à ajouter.		*	@param $positionX Position en X sur la carte.		*	@param $positionY Position en Y sur la carte.		*/		public function ajouter ( $objet:Objet, $positionX:int, $positionY:int ):void		{			/**			 * Si la hauteur/largeur des objets n'a pas été définie			 * On la définit automatiquement en fonction des dimensions			 * du premier objet ajouté.			 */			if ( _largeurObjets == 0 && _hauteurObjets == 0 )			{				_hauteurObjets = $objet.height;				_largeurObjets = $objet.width;			}						/**			 * On lui indique sa position et sa carte.			 */			$objet.positionX = $positionX;			$objet.positionY = $positionY;			$objet.carte = this; 			/**			 * On place l'objet au bon endroit.			 */			$objet.x = _largeurObjets * $positionX;			$objet.y = _hauteurObjets * $positionY; 			/**			 * On ajoute l'objet au tableau d'objets			 */			if ( $objet.type == TypesObjets.SOL || $objet.type == TypesObjets.MUR )			{				/**				 * Si l'objet est un sol ou un mur,				 * On l'ajoute au tableau des sols.				 */				 _sols [$positionX][$positionY] = $objet;								/**				 * Et on l'ajoute à la liste d'affichage.				 */				_solsSprite.addChild ( $objet );			}			else if ( $objet.type == TypesObjets.JOUEUR )			{				/**				 * Sinon, s'il s'agit d'un joueur,				 * On l'ajoute au tableau de joueurs.				 */				 _joueurs.push ( $objet );								/**				 * Et on l'ajoute à la liste d'affichage.				 */				_joueursSprite.addChild ( $objet );			}			else			{				/**				 * Sinon,				 * on l'ajoute au tableau d'objets.				 */				_objets [$positionX][$positionY] = $objet;								/**				 * Et on l'ajoute à la liste d'affichage.				 */				_objetsSprite.addChild ( $objet );			}		} 		/**		*	Méthode pour supprimer un objet dans la carte.		* 		* 	@param $objet Objet à supprimer.		*/		public function supprimer ( $objet:Objet ):void		{			if ( $objet.type == TypesObjets.SOL || $objet.type == TypesObjets.MUR )			{				/**				 * Si l'objet est un sol,				 * On vérifie bien qu'il s'agit de l'objet présent sur la carte,				 * Dans le cas contraire, on s'arrête.				 */				if ( _sols [ $objet.positionX ] [ $objet.positionY ] != $objet )					return;								/**				 * Si l'objet est bien celui présent sur la carte, on supprime l'objet de la liste d'affichage.				 */				_solsSprite.removeChild ( $objet );									/**				 * On le retire du tableau.				 */				_sols [$objet.positionX][$objet.positionY] = null;			}			else if ( $objet.type == TypesObjets.JOUEUR )			{				/**				 * Sinon, si l'objet est un joueur,				 * On vérifie bien qu'il s'agit du joueur présent sur la carte,				 * Dans le cas contraire, on s'arrête.				 */								/**				 * Enregistrement de la position du joueur dans le tableau.				 */				var id:int = _joueurs.indexOf ( $objet );								if ( id == -1 )					return;								/**				 * Si le joueur est bien celui présent sur la carte, on supprime l'objet de la liste d'affichage.				 */				_joueursSprite.removeChild ( $objet );									/**				 * On le retire du tableau.				 */				_joueurs.splice ( id, 1 );			}			else			{				/**				 * Sinon,				 * On vérifie bien qu'il s'agit de l'objet présent sur la carte,				 * Dans le cas contraire, on s'arrête.				 */				if ( _objets [ $objet.positionX ] [ $objet.positionY ] != $objet )					return;								/**				 * Si l'objet est bien celui présent sur la carte, on supprime l'objet de la liste d'affichage.				 */				_objetsSprite.removeChild ( $objet );									/**				 * On le retire du tableau.				 */				_objets [$objet.positionX][$objet.positionY] = null;			}						/**			 * Et on détruit l'objet.			 */			$objet.dispose ();		}				/**		*	Méthode pour récupérer un sol ou un mur dans la carte.		* 		* 	@param $positionX Position en X sur la carte.		*	@param $positionY Position en Y sur la carte.		*		*	@return Objet à la case indiquée.		*/		public function sol ( $positionX:int, $positionY:int ):Objet		{			return _sols [$positionX][$positionY];		}						/**		*	Méthode pour récupérer un objet dans la carte.		* 		* 	@param $positionX Position en X sur la carte.		*	@param $positionY Position en Y sur la carte.		*		*	@return Objet à la case indiquée.		*/		public function objet ( $positionX:int, $positionY:int ):Objet		{			return _objets [$positionX][$positionY];		} 		/**		 * Getters		 */		public function get hauteurObjets ( ):Number { return _hauteurObjets; };		public function get largeurObjets ( ):Number { return _largeurObjets; };	}}