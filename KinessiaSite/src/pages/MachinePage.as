package pages {	import com.gaiaframework.api.IBitmap;	import com.gaiaframework.api.IBitmapSprite;	import com.gaiaframework.templates.AbstractPage;	import com.greensock.TweenMax;	import flash.display.Bitmap;	import flash.display.Sprite;	import flash.events.Event;	import flash.events.MouseEvent;	public class MachinePage extends AbstractPage {		private var _background:Bitmap;		private var _background2:Bitmap;		private var _galerie:Sprite;		private var _creer:Sprite;		public function MachinePage() {			super();			alpha = 0;		}		override public function transitionIn():void {			super.transitionIn();			TweenMax.to(this, 0.3, {alpha:1, onComplete:transitionInComplete});			_background = new Bitmap(IBitmap(assets.imgMachine).bitmapData);			_background.x = (stage.stageWidth - _background.width) / 2;			addChild(_background);						_background2 = new Bitmap(IBitmap(assets.imgMachine2).bitmapData);			_background2.x = (stage.stageWidth - _background2.width) / 2;			addChild(_background2);			_background2.alpha = 0;			_galerie = new Sprite();			addChild(_galerie);			_galerie.addChild(IBitmapSprite(assets.galerieOver).container);			_galerie.addChild(IBitmapSprite(assets.galerie).container);			IBitmapSprite(assets.galerie).visible = true;			IBitmapSprite(assets.galerieOver).name = "galerieOver",	IBitmapSprite(assets.galerie).name = "galerie";			_galerie.buttonMode = true;			_galerie.x = (stage.stageWidth - _galerie.width) / 2 + 425;			_galerie.y = 726;						_creer = new Sprite();			addChild(_creer);			_creer.addChild(IBitmapSprite(assets.creerOver).container);			_creer.addChild(IBitmapSprite(assets.creer).container);			IBitmapSprite(assets.creer).visible = true;			IBitmapSprite(assets.creerOver).name = "creerOver",	IBitmapSprite(assets.creer).name = "creer";						_creer.buttonMode = true;			_creer.x = (stage.stageWidth - _creer.width) / 2;			_creer.y = 640;			_creer.visible = false;			_galerie.addEventListener(MouseEvent.CLICK, _click);			_galerie.addEventListener(MouseEvent.MOUSE_OVER, _over);			_galerie.addEventListener(MouseEvent.MOUSE_OUT, _out);						_creer.addEventListener(MouseEvent.CLICK, _click);			_creer.addEventListener(MouseEvent.MOUSE_OVER, _over);			_creer.addEventListener(MouseEvent.MOUSE_OUT, _out);			stage.addEventListener(Event.RESIZE, _onResize);		}		private function _click(mEvt:MouseEvent):void {			switch (mEvt.target.name) {								case "galerieOver":					_galerie.visible = false;					TweenMax.to(_background2, 0.5, {alpha:1, onComplete:function():void{_background.alpha = 0;}});					_creer.visible = true; _creer.alpha = 0;					TweenMax.to(_creer, 0.5, {alpha:1});					this.setChildIndex(_background2, 1);					break;									case "creerOver":					_creer.visible = false;					TweenMax.to(_background, 0.5, {alpha:1, onComplete:function():void{_background2.alpha = 0;}});					_galerie.visible = true; _galerie.alpha = 0;					TweenMax.to(_galerie, 0.5, {alpha:1});					this.setChildIndex(_background, 1);					break;			}		}		private function _over(mEvt:MouseEvent):void {			switch (mEvt.target.name) {								case "galerie":					IBitmapSprite(assets.galerie).visible = false;					IBitmapSprite(assets.galerieOver).visible = true;					break;									case "creer":					IBitmapSprite(assets.creer).visible = false;					IBitmapSprite(assets.creerOver).visible = true;					break;			}		}		private function _out(mEvt:MouseEvent):void {						switch (mEvt.target.name) {								case "galerieOver":					IBitmapSprite(assets.galerie).visible = true;					IBitmapSprite(assets.galerieOver).visible = false;					break;									case "creerOver":					IBitmapSprite(assets.creer).visible = true;					IBitmapSprite(assets.creerOver).visible = false;					break;			}		}		private function _onResize(evt:Event):void {			_background.x = (stage.stageWidth - _background.width) / 2;			_background2.x = (stage.stageWidth - _background2.width) / 2;						_galerie.x = (stage.stageWidth - _galerie.width) / 2 + 425;			_creer.x = (stage.stageWidth - _creer.width) / 2;		}		override public function transitionOut():void {						_galerie.removeEventListener(MouseEvent.CLICK, _click);			_galerie.removeEventListener(MouseEvent.MOUSE_OVER, _over);			_galerie.removeEventListener(MouseEvent.MOUSE_OUT, _out);						_creer.removeEventListener(MouseEvent.CLICK, _click);			_creer.removeEventListener(MouseEvent.MOUSE_OVER, _over);			_creer.removeEventListener(MouseEvent.MOUSE_OUT, _out);			stage.removeEventListener(Event.RESIZE, _onResize);			super.transitionOut();			TweenMax.to(this, 0.3, {alpha:0, onComplete:transitionOutComplete});		}	}}