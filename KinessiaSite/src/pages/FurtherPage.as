package pages {	import com.gaiaframework.api.IBitmap;	import com.gaiaframework.api.IBitmapSprite;	import com.gaiaframework.templates.AbstractPage;	import com.greensock.TweenMax;	import flash.display.Bitmap;	import flash.display.Shape;	import flash.display.Sprite;	import flash.events.Event;	import flash.events.MouseEvent;	public class FurtherPage extends AbstractPage {		private var _background:Bitmap;		private var _container:Sprite, _artist:Sprite;		public function FurtherPage() {			super();			alpha = 0;		}		override public function transitionIn():void {			super.transitionIn();			TweenMax.to(this, 0.3, {alpha:1, onComplete:transitionInComplete});			_background = new Bitmap(IBitmap(assets.imgFurther).bitmapData);			_background.x = (stage.stageWidth - _background.width) / 2;			addChild(_background);			_container = new Sprite();			addChild(_container);			_container.x = (stage.stageWidth - _container.width) / 2 - 480;			_container.y = 370;			_artist = new Sprite();			_container.addChild(_artist);			_artist.addChild(new Bitmap(IBitmap(assets.jansen).bitmapData));			var tinguely:Bitmap = new Bitmap(IBitmap(assets.tinguely).bitmapData);			_artist.addChild(tinguely);			tinguely.x = 1000;			var shape:Shape = new Shape();			shape.graphics.beginFill(0xFF00000);			shape.graphics.drawRoundRect(0, 0, 950, 400, 10, 10);			shape.graphics.endFill();			_container.addChild(shape);			_artist.mask = shape;			_container.addChild(IBitmapSprite(assets.leftOver).container);			_container.addChild(IBitmapSprite(assets.left).container);			IBitmapSprite(assets.left).visible = true;			IBitmapSprite(assets.leftOver).name = "leftOver", IBitmapSprite(assets.left).name = "left";			_container.addChild(IBitmapSprite(assets.rightOver).container);			_container.addChild(IBitmapSprite(assets.right).container);			IBitmapSprite(assets.right).visible = true;			IBitmapSprite(assets.rightOver).x = IBitmapSprite(assets.right).x = 900;			IBitmapSprite(assets.rightOver).name = "rightOver", IBitmapSprite(assets.right).name = "right";			IBitmapSprite(assets.leftOver).buttonMode = IBitmapSprite(assets.rightOver).buttonMode = true;						var grass:Bitmap = new Bitmap(IBitmap(assets.grass).bitmapData);			_container.addChild(grass);			grass.x = -100;			grass.y = 320;						var conservateur:Bitmap = new Bitmap(IBitmap(assets.conservateur).bitmapData);			_container.addChild(conservateur);			conservateur.scaleX = conservateur.scaleY = 0.6;			conservateur.smoothing = true;			conservateur.x = 800;			conservateur.y = 200;			IBitmapSprite(assets.leftOver).addEventListener(MouseEvent.CLICK, _click);			IBitmapSprite(assets.rightOver).addEventListener(MouseEvent.CLICK, _click);			IBitmapSprite(assets.left).addEventListener(MouseEvent.MOUSE_OVER, _over);			IBitmapSprite(assets.right).addEventListener(MouseEvent.MOUSE_OVER, _over);			IBitmapSprite(assets.leftOver).addEventListener(MouseEvent.MOUSE_OUT, _out);			IBitmapSprite(assets.rightOver).addEventListener(MouseEvent.MOUSE_OUT, _out);			stage.addEventListener(Event.RESIZE, _onResize);		}		private function _click(mEvt:MouseEvent):void {			switch(mEvt.target.name) {				case "leftOver":					TweenMax.to(_artist, 0.5, {x:0});					break;				case "rightOver":					TweenMax.to(_artist, 0.5, {x:-1000});					break;			}		}		private function _over(mEvt:MouseEvent):void {			switch (mEvt.target.name) {								case "left":					IBitmapSprite(assets.left).visible = false;					IBitmapSprite(assets.leftOver).visible = true;					break;				case "right":					IBitmapSprite(assets.right).visible = false;					IBitmapSprite(assets.rightOver).visible = true;					break;			}		}		private function _out(mEvt:MouseEvent):void {			switch (mEvt.target.name) {				case "leftOver":					IBitmapSprite(assets.left).visible = true;					IBitmapSprite(assets.leftOver).visible = false;					break;				case "rightOver":					IBitmapSprite(assets.right).visible = true;					IBitmapSprite(assets.rightOver).visible = false;					break;			}		}		private function _onResize(evt:Event):void {			_background.x = (stage.stageWidth - _background.width) / 2;			_container.x = (stage.stageWidth - _container.width) / 2 + 550;		}		override public function transitionOut():void {			IBitmapSprite(assets.leftOver).removeEventListener(MouseEvent.CLICK, _click);			IBitmapSprite(assets.rightOver).removeEventListener(MouseEvent.CLICK, _click);			IBitmapSprite(assets.left).removeEventListener(MouseEvent.MOUSE_OVER, _over);			IBitmapSprite(assets.right).removeEventListener(MouseEvent.MOUSE_OVER, _over);			IBitmapSprite(assets.leftOver).removeEventListener(MouseEvent.MOUSE_OUT, _out);			IBitmapSprite(assets.rightOver).removeEventListener(MouseEvent.MOUSE_OUT, _out);			stage.removeEventListener(Event.RESIZE, _onResize);			super.transitionOut();			TweenMax.to(this, 0.3, {alpha:0, onComplete:transitionOutComplete});		}	}}